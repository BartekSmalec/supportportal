# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
  
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    machine: true
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    #docker:
      #- image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Set JAVA_TOOL_OPTIONS
          command: |
            echo "export JAVA_TOOL_OPTIONS='-Dfile.encoding=UTF8 --add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'" >> $BASH_ENV
            source $BASH_ENV
                      
      # Check maven version
      - run: mvn -version
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build JAR
          command: mvn clean package -DskipTests -Pprod
      # check code with spotless
      - run:
          name: Run Spotless check
          command: mvn spotless:check
      # Then run your tests
      - run:
          name: Test
          command: mvn integration-test
      - store_artifacts:
          path: target
      - run:
          name: Copy JAR to EC2 instance
          command: |
            scp target/supportportal.jar $SSH_USER@$SSH_HOST:/home/ec2-user/supportportal
      - run:
          name: Start Application on EC2 instance
          command: |
            ssh $SSH_USER@$SSH_HOST "java -jar /home/ec2-user/supportportal/supportportal.jar --spring.profiles.active=prod > /dev/null 2>&1 &"
      - run:
          name: Upload reports to Codecov
          command: curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov && ./codecov

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  supportportal-worlflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test

        
