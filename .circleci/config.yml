# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
  
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    machine: true

    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Set JAVA_TOOL_OPTIONS
          command: |
            echo "export JAVA_TOOL_OPTIONS='-Dfile.encoding=UTF8 --add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'" >> $BASH_ENV
            source $BASH_ENV
                      
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Test and  build jar
          command: mvn -B -V clean verify
      # check code with spotless
      - run:
          name: Run Spotless check
          command: mvn spotless:check

      - store_artifacts:
          path: target
      - persist_to_workspace:
          root: target
          paths:
            - supportportal.jar

      - run:
          name: Upload reports to Codecov
          command: curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov && ./codecov

  deploy-to-ec2:
    docker: 
      - image: openjdk:16-jdk-alpine
    steps:
      - checkout
     
      - run:
          name: Install dependencies
          command: |
            apk update && apk upgrade && \
            apk add --no-cache bash openssh  
      - run:
          name: Authenticate with SSH Key
          command: |
            mkdir -p ~/.ssh && echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa && ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
      - run:
          name: Remove previous jar
          command: ssh $SSH_USER@$SSH_HOST 'rm /home/ec2-user/supportportal/supportportal.jar'
      - run:
          name: Copy JAR to EC2 instance
          command: |
            scp target/supportportal.jar $SSH_USER@$SSH_HOST:/home/ec2-user/supportportal
      - run:
          name: Start Application on EC2 instance
          command: |
            ssh $SSH_USER@$SSH_HOST "nohup java -jar /home/ec2-user/supportportal/supportportal.jar --spring.profiles.active=prod > /dev/null 2>&1 &"
      - run:
          name: Check Application Health
          command: |
            sleep 30 # Wait for the application to start
            RESPONSE=$(curl -s http://$BACKEND_IP/actuator/health) # Send a request to the application's /actuator/health endpoint
            echo $RESPONSE
            if [[ "$RESPONSE" == *"\"status\":\"UP\""* ]]; then
              echo "Application is running and healthy"
            else
              echo "Application is not running or is not healthy"
              exit 1
            fi
   

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  supportportal-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - deploy-to-ec2:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main

        
